package components

import "fmt"

// InputType definiert den Typ des Eingabefelds
type InputType string

const (
	InputText     InputType = "text"
	InputEmail    InputType = "email"
	InputPassword InputType = "password"
	InputNumber   InputType = "number"
	InputTel      InputType = "tel"
	InputSearch   InputType = "search"
	InputDate     InputType = "date"
	InputTime     InputType = "time"
)

// TextInput rendert ein standardisiertes Texteingabefeld
templ TextInput(id string, name string, label string, placeholder string, value string, required bool, inputType InputType, icon string) {
	<div class="space-y-2">
		<label for={ id } class="block text-lg font-medium text-gray-700">
			if icon != "" {
				<i class={ "fas fa-" + icon + " mr-2 text-brand-500" }></i>
			}
			{ label }
		</label>
		<div class="relative">
			<input
				type={ string(inputType) }
				id={ id }
				name={ name }
				placeholder={ placeholder }
				value={ value }
				if required {
					required
				}
				class="block w-full px-4 py-3 text-lg rounded-lg border border-gray-300 focus:ring-2 focus:ring-brand-500 focus:border-brand-500"
			/>
		</div>
	</div>
}

// TextareaField rendert ein standardisiertes Textfeld mit mehreren Zeilen
templ TextareaField(id string, name string, label string, placeholder string, value string, required bool, rows int, icon string) {
	<div class="space-y-2">
		<label for={ id } class="block text-lg font-medium text-gray-700">
			if icon != "" {
				<i class={ "fas fa-" + icon + " mr-2 text-brand-500" }></i>
			}
			{ label }
		</label>
		<textarea
			id={ id }
			name={ name }
			placeholder={ placeholder }
			rows={ fmt.Sprint(rows) }
			if required {
				required
			}
			class="block w-full px-4 py-3 text-lg rounded-lg border border-gray-300 focus:ring-2 focus:ring-brand-500 focus:border-brand-500"
		>{ value }</textarea>
	</div>
}

// SelectField rendert ein standardisiertes Dropdown-Auswahlfeld
templ SelectField(id string, name string, label string, selected string, required bool, icon string) {
	<div class="space-y-2">
		<label for={ id } class="block text-lg font-medium text-gray-700">
			if icon != "" {
				<i class={ "fas fa-" + icon + " mr-2 text-brand-500" }></i>
			}
			{ label }
		</label>
		<select
			id={ id }
			name={ name }
			if required {
				required
			}
			class="block w-full px-4 py-3 text-lg rounded-lg border border-gray-300 focus:ring-2 focus:ring-brand-500 focus:border-brand-500"
		>
			{ children... }
		</select>
	</div>
}

// SelectOption rendert eine Option für das SelectField
templ SelectOption(value string, label string, selected bool) {
	<option value={ value } if selected {
	selected
}>
		{ label }
	</option>
}

// CheckboxField rendert ein standardisiertes Checkbox-Feld
templ CheckboxField(id string, name string, label string, checked bool, value string) {
	<div class="flex items-start">
		<div class="flex items-center h-5">
			<input
				type="checkbox"
				id={ id }
				name={ name }
				value={ value }
				if checked {
					checked
				}
				class="w-5 h-5 text-brand-600 border-gray-300 rounded focus:ring-brand-500"
			/>
		</div>
		<div class="ml-3 text-lg">
			<label for={ id } class="font-medium text-gray-700">{ label }</label>
		</div>
	</div>
}

// RadioField rendert ein standardisiertes Radio-Button-Feld
templ RadioField(id string, name string, label string, value string, checked bool) {
	<div class="flex items-center">
		<input
			type="radio"
			id={ id }
			name={ name }
			value={ value }
			if checked {
				checked
			}
			class="w-5 h-5 text-brand-600 border-gray-300 focus:ring-brand-500"
		/>
		<label for={ id } class="ml-3 block text-lg font-medium text-gray-700">
			{ label }
		</label>
	</div>
}

// ImageRadioField rendert ein Radio-Button mit Bild und Icon
templ ImageRadioField(id string, name string, value string, icon string, label string, checked bool) {
	<label class="relative flex cursor-pointer">
		<input
			type="radio"
			id={ id }
			name={ name }
			value={ value }
			class="peer sr-only"
			if checked {
				checked
			}
		/>
		<div class="w-full p-4 bg-white border border-gray-300 rounded-lg peer-checked:border-brand-500 peer-checked:ring-2 peer-checked:ring-brand-500 hover:border-brand-300">
			<div class="flex items-center justify-center">
				<i class={ "fas fa-" + icon + " text-2xl mb-2 text-brand-500" }></i>
			</div>
			<div class="text-center font-medium">{ label }</div>
		</div>
	</label>
}

// FormGroup umschließt mehrere Formularelemente mit einheitlichem Styling
templ FormGroup(title string) {
	<div class="p-6 space-y-6 bg-white/90 backdrop-blur-sm rounded-lg shadow-md border border-gray-200">
		if title != "" {
			<h3 class="text-xl font-semibold text-gray-800 mb-4">{ title }</h3>
		}
		{ children... }
	</div>
}

// FormSection erzeugt einen größeren Abschnitt für zusammengehörige Formularelemente
templ FormSection(title string, description string, icon string) {
	<div class="mb-8">
		<div class="flex items-center mb-2">
			if icon != "" {
				<i class={ "fas fa-" + icon + " text-xl text-brand-500 mr-2" }></i>
			}
			<h2 class="text-2xl font-bold text-gray-800">{ title }</h2>
		</div>
		if description != "" {
			<p class="text-gray-600 mb-4">{ description }</p>
		}
		<div class="space-y-4">
			{ children... }
		</div>
	</div>
}

// Form erzeugt ein vollständiges Formular mit CSRF-Token und Submit-Button
templ Form(action string, method string, csrfToken string) {
	<form action={ templ.SafeURL(action) } method={ method } class="space-y-6">
		<input type="hidden" name="csrf_token" value={ csrfToken }/>
		{ children... }
	</form>
}

// FormActions rendert einen Bereich für die Formular-Aktionsschaltflächen
templ FormActions() {
	<div class="flex justify-end space-x-4 pt-4 border-t border-gray-200">
		{ children... }
	</div>
}
